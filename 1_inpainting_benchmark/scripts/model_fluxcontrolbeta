
import torch
from PIL import Image
from diffusers.utils import load_image

import sys
import os
import torchvision.transforms as T

from controlnet_flux import FluxControlNetModel
from transformer_flux import FluxTransformer2DModel
from pipeline_flux_controlnet_inpaint import FluxControlNetInpaintingPipeline

print("[Flux-ControlNet] Loading models...")
controlnet = FluxControlNetModel.from_pretrained("alimama-creative/FLUX.1-dev-Controlnet-Inpainting-Alpha", torch_dtype=torch.bfloat16)
transformer = FluxTransformer2DModel.from_pretrained(
        "black-forest-labs/FLUX.1-dev", subfolder='transformer', torch_dtype=torch.bfloat16
    )
pipe = FluxControlNetInpaintingPipeline.from_pretrained(
    "black-forest-labs/FLUX.1-dev",
    controlnet=controlnet,
    transformer=transformer,
    torch_dtype=torch.bfloat16
).to("cuda")
pipe.transformer.to(torch.bfloat16)
pipe.controlnet.to(torch.bfloat16)

def inpaint(image, mask, prompt):
    """
    Inpainting avec FLUX-ControlNet

    Args:
        image: PIL image RGB
        mask: PIL image RGB (zone à remplacer = blanc) 
        
        prompt: prompt textuel

    Returns:
        Image inpaintée (PIL.Image)
    """
    size = (768, 768)
    image = image.convert("RGB").resize(size)
    mask = mask.convert("RGB").resize(size)

    image = load_image("/fsx/jdelavande/inpaint-benchmark-suite/1_inpainting_benchmark/scripts/flux_controlnet/images/bucket.png").convert("RGB").resize(size)
    mask = load_image("/fsx/jdelavande/inpaint-benchmark-suite/1_inpainting_benchmark/scripts/flux_controlnet/images/mask_bucket.png").convert("RGB").resize(size)

    generator = torch.Generator(device="cuda").manual_seed(24)

    result = pipe(
        prompt=prompt,
        height=size[1],
        width=size[0],
        control_image=image,
        control_mask=mask,
        num_inference_steps=28,
        generator=generator,
        controlnet_conditioning_scale=0.9,
        guidance_scale=3.5,
        negative_prompt="",
        true_guidance_scale=1.0 # default: 3.5 for alpha and 1.0 for beta
    ).images[0]

    return result, mask

if __name__ == "__main__":
    # Exemple d'utilisation
    image_path = "/fsx/jdelavande/inpaint-benchmark-suite/1_inpainting_benchmark/scripts/flux_controlnet/images/bucket.png"
    mask_path = "/fsx/jdelavande/inpaint-benchmark-suite/1_inpainting_benchmark/scripts/flux_controlnet/images/mask_bucket.png"
    prompt = "a person wearing a white shoe, carrying a white bucket with text 'FLUX' on it"

    image = load_image(image_path)
    mask = load_image(mask_path)

    result_image = inpaint(image, mask, prompt)
    result_image.save("flux_inpaint_result.png")
    print("Inpainting completed and saved as 'flux_inpaint_result.png'")